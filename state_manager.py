#encoding=utf8
'''
state and manager
'''

class State(): 
    '''
    state
    '''

    def __init__(self): 
        '''
        init
        '''
        self.image              = None
        self.player_hp          = 0
        self.boss_hp            = 0
        self.is_player_hp_down  = False
        self.is_boss_hp_down    = False

        # the id derived from the classification model
        # 0/1/2/3
        self.class_id           = 0

        # real state id, generated by manager
        # NOT unique id, just like class id
        # 0 1 2 3 4 5
        self.state_id           = 0

        # some previous states, only save state-id
        self.arr_history_state_id     = []


    def get_state_id_with_history(self): 
        '''
        get current state_id and history states id
        [S t-2, S t-1, S t]
        '''
        ret = self.arr_history_state_id.copy()
        ret.append(self.state_id)
        return ret


class StateManager(): 
    '''
    history state manager
    '''

    def __init__(self, HULU_THRESHOLD): 
        '''
        init
        '''
        self.MAX_LENGTH = 1

        default_state = State()

        # history state: [S t-2, S t-1]
        self.arr_state  = [default_state for x in range(self.MAX_LENGTH)]

        self.HULU_THRESHOLD = HULU_THRESHOLD

        # 0 1 2 3
        self.BASE_MAX_STATE_ID          = 3
        # 4
        self.PLAYER_HP_DOWN_STATE_ID    = self.BASE_MAX_STATE_ID + 1
        # 5
        self.HULU_STATE_ID              = self.BASE_MAX_STATE_ID + 2


    def save(self, state): 
        '''
        add a new state to the state history
        '''
        if len(self.arr_state) >= self.MAX_LENGTH: 
            # remove the first one (oldest one)
            self.arr_state.pop(0)

        state.state_id = self.generate_state_id(state)
        self.arr_state.append(state)


    def get_all_history_states_id(self): 
        '''
        get all the states id
        '''
        return [state.state_id for state in self.arr_state]


    def generate_state_id(self, state): 
        '''
        generate state id 
        '''

        # if player hp is down, this is a extra state
        if state.is_player_hp_down: 
            class_id = self.PLAYER_HP_DOWN_STATE_ID
            # log.info('extra state player_hp_down %s' % (class_id))
            return class_id

        # check if boss is stunned, and player hp less than threshold, this is a extra state to take hulu.
        if state.is_boss_hp_down and state.player_hp < self.HULU_THRESHOLD: 
            class_id = self.HULU_STATE_ID
            # log.info('extra state take_hulu %s' % (class_id))
            return class_id

        # default case
        return state.class_id

