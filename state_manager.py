#encoding=utf8
'''
state and manager
'''

from log import log
class State(): 
    '''
    state
    '''

    def __init__(self): 
        '''
        init
        '''
        self.image              = None
        self.player_hp          = 0
        self.boss_hp            = 0
        self.is_player_hp_down  = False
        self.is_boss_hp_down    = False

        # if the boss attacks the player, and the player's hp drop slightly, < 10 for example.
        self.is_player_hp_down_slightly = False

        # the id derived from the classification model
        # 0/1/2/3/4
        self.class_id           = 0

        self.NORMAL_CLASS_ID    = 0

        # 起跳下击，接突刺
        self.TUCI_CLASS_ID      = 1

        # 擒拿
        self.QINNA_CLASS_ID     = 2

        # 飞渡浮舟
        self.FUZHOU_CLASS_ID    = 3

        # 原地后撤突刺, is very inaccurate
        self.BAD_TUCI_CLASS_ID  = 4

        # real state id, generated by manager
        # 0 1 2 3 4 5 6
        self.state_id           = 0

        # some previous class ids
        self.arr_history_class_id = []

        # state id with more data.
        # it equals to state id actually
        self.final_state_id     = None


    def get_final_state_id(self): 
        '''
        get final state id 
        '''
        return self.final_state_id


class StateManager(): 
    '''
    state manager
    '''

    def __init__(self): 
        '''
        init
        '''
        # max history length
        self.MAX_LENGTH = 5

        default_state = State()

        # history state: [..., S t-2, S t-1]
        self.arr_state  = [default_state for x in range(self.MAX_LENGTH)]

        # hp threshold to take hulu.
        self.HULU_THRESHOLD = 60

        # possible state id, see self.generate_state_id()
        # 0 1 2 3 4 <----> class_id
        self.NORMAL_STATE_ID    = 0
        self.TUCI_STATE_ID      = 1
        self.QINNA_STATE_ID     = 2
        self.FUZHOU_STATE_ID    = 3
        self.BAD_TUCI_STATE_ID  = 4

        # extra states
        self.PLAYER_HP_DOWN_STATE_ID    = 5
        self.HULU_STATE_ID              = 6


    def save(self, state): 
        '''
        add a new state to the state history
        '''
        log.debug('add a new state to the state history')
        if len(self.arr_state) >= self.MAX_LENGTH: 
            # remove the first one (oldest one)
            self.arr_state.pop(0)

        # populate arr_history_class_id
        state.arr_history_class_id = self.get_all_history_class_id()

        # generate state id
        state.state_id = self.generate_state_id(state)
        state.final_state_id = state.state_id

        # save it, at last.
        self.arr_state.append(state)


    def get_all_history_class_id(self): 
        '''
        get all the states' class id
        '''
        return [state.class_id for state in self.arr_state]


    def generate_state_id(self, state): 
        '''
        generate state id 
        '''
        # check if boss is stunned, and player hp less than threshold, this is a extra state to take hulu.
        if state.is_boss_hp_down and state.player_hp < self.HULU_THRESHOLD: 
            state_id = self.HULU_STATE_ID
            log.debug('extra state take_hulu %s' % (state_id))
            return state_id

        # if player hp is down, this is a extra state
        if state.is_player_hp_down: 
            state_id = self.PLAYER_HP_DOWN_STATE_ID
            log.debug('extra state player_hp_down %s' % (state_id))
            return state_id

        # default case, use the class id derived from the classification model.
        # some classes need to check signal strength
        # only when the signal strength is good enough, will do attack.
        class_id = state.class_id
        # class 0, 4
        if class_id == state.NORMAL_CLASS_ID: 
            state_id = class_id
            log.debug('class_id is NORMAL_CLASS_ID, class_id[%s]->state_id[%s]' % (class_id, state_id))
            return state_id

        if class_id == state.BAD_TUCI_CLASS_ID: 
            state_id = class_id
            log.debug('class_id is BAD_TUCI_CLASS_ID, class_id[%s]->state_id[%s]' % (class_id, state_id))
            return state_id

        # class 1, 2, 3
        number_of_history_needed = 2
        if class_id == state.FUZHOU_CLASS_ID: 
            number_of_history_needed = 2

        signal_strength = 0
        for i in range(0, number_of_history_needed): 
            if state.arr_history_class_id[-1 * (i + 1)] == class_id: 
                signal_strength += 1

        log.debug('class_id: %s, signal_strength: %s, number_of_history_needed: %s' % (class_id, signal_strength, number_of_history_needed))
        if signal_strength >= number_of_history_needed: 
            state_id = class_id
            log.debug('signal_strength big enough, state_id[%s]' % (state_id))
            # should clear the history?
            return state_id

        # default case, default state
        state_id = self.NORMAL_STATE_ID
        log.debug('signal_strength NOT big enough, fall back to default state_id[%s]' % (state_id))
        return state_id

